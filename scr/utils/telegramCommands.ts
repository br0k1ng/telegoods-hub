
import { toast } from 'sonner';
import { createPromoCode, deletePromoCode, togglePromoCodeStatus, getAllPromoCodes } from '../features/promocodes';
import { products } from '../features/products/data';
import { TelegramCommandResponse } from './telegramTypes';
import { handleHelpCommand, handleAdminCommand } from './telegramDocs';

export const handleTelegramCommand = async (command: string, params: string[]): Promise<TelegramCommandResponse> => {
  try {
    // Split the command and parameters
    const [mainCommand, ...subCommands] = command.split('_');
    
    switch (mainCommand) {
      case 'start':
        return {
          success: true,
          message: `‚úÖ –ë–æ—Ç CIOT R√ñSE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
        };
        
      case 'help':
        return handleHelpCommand();
        
      case 'admin':
        return handleAdminCommand();
        
      case 'createpromo':
        return handleCreatePromoCommand(params);
      
      case 'listpromos':
        return handleListPromosCommand();
      
      case 'deletepromo':
        return handleDeletePromoCommand(params);
      
      case 'togglepromo':
        return handleTogglePromoCommand(params);
      
      case 'setdiscount':
        return handleSetDiscountCommand(params);
      
      case 'products':
        return handleProductsCommand(subCommands, params);
      
      default:
        return {
          success: false,
          message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        };
    }
  } catch (error) {
    console.error('Error handling Telegram command:', error);
    return {
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã'
    };
  }
};

const handleCreatePromoCommand = (params: string[]): TelegramCommandResponse => {
  // Expected format: /createpromo CODE DISCOUNT MAXUSES EXPIRYDATE
  // Example: /createpromo SUMMER2023 0.15 100 2023-09-30
  if (params.length < 4) {
    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /createpromo –ö–û–î –°–ö–ò–î–ö–ê –ú–ê–ö–°_–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ô –î–ê–¢–ê_–û–ö–û–ù–ß–ê–ù–ò–Ø'
    };
  }
  
  const [code, discountStr, maxUsesStr, ...dateParts] = params;
  const discount = parseFloat(discountStr);
  const maxUses = parseInt(maxUsesStr);
  const expiryDate = dateParts.join(' ');
  
  if (isNaN(discount) || discount <= 0 || discount >= 1) {
    return {
      success: false,
      message: '–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.15 –¥–ª—è 15%)'
    };
  }
  
  if (isNaN(maxUses) || maxUses <= 0) {
    return {
      success: false,
      message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
    };
  }
  
  try {
    const promo = createPromoCode(code, discount, maxUses, new Date(expiryDate).toISOString());
    return {
      success: true,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ ${code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount * 100}%, ${maxUses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –¥–æ ${new Date(expiryDate).toLocaleDateString()}`
    };
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    };
  }
};

const handleListPromosCommand = (): TelegramCommandResponse => {
  const promos = getAllPromoCodes();
  
  if (promos.length === 0) {
    return {
      success: true,
      message: '–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
    };
  }
  
  const promosInfo = promos.map(promo => {
    const expiryDate = new Date(promo.expiryDate).toLocaleDateString();
    return `${promo.code}: ${promo.discount * 100}%, –û—Å—Ç–∞–ª–æ—Å—å: ${promo.usesLeft}/${promo.maxUses}, –î–æ: ${expiryDate}, –°—Ç–∞—Ç—É—Å: ${promo.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`;
  }).join('\n');
  
  return {
    success: true,
    message: `–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n${promosInfo}`
  };
};

const handleDeletePromoCommand = (params: string[]): TelegramCommandResponse => {
  if (params.length < 1) {
    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deletepromo –ö–û–î'
    };
  }
  
  const code = params[0];
  const success = deletePromoCode(code);
  
  if (success) {
    return {
      success: true,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ ${code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
    };
  } else {
    return {
      success: false,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ ${code} –Ω–µ –Ω–∞–π–¥–µ–Ω`
    };
  }
};

const handleTogglePromoCommand = (params: string[]): TelegramCommandResponse => {
  if (params.length < 1) {
    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /togglepromo –ö–û–î'
    };
  }
  
  const code = params[0];
  const result = togglePromoCodeStatus(code);
  
  if (result) {
    return {
      success: true,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ ${code} —Ç–µ–ø–µ—Ä—å ${result.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`
    };
  } else {
    return {
      success: false,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ ${code} –Ω–µ –Ω–∞–π–¥–µ–Ω`
    };
  }
};

const handleSetDiscountCommand = (params: string[]): TelegramCommandResponse => {
  return {
    success: false,
    message: 'üîß –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
  };
};

const handleProductsCommand = (subCommands: string[], params: string[]): TelegramCommandResponse => {
  return {
    success: false,
    message: 'üîß –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
  };
};
